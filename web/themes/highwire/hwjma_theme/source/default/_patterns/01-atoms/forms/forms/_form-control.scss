.form-control {
  display: block;
  width: 100%;
  padding: $input-padding-y $input-padding-x;
  font-family: $input-font-family;
  @include font-size($input-font-size);
  font-weight: $input-font-weight;
  line-height: $input-line-height;
  color: $input-color;
  background-color: $input-bg;
  background-clip: padding-box;
  border: 1px solid $primary-dark;
  border-radius: 0.35rem;
  appearance: none; // Fix appearance for date inputs in Safari
  @include box-shadow($input-box-shadow);
  @include transition($input-transition);
  &[type="file"] {
    overflow: hidden; // prevent pseudo element button overlap

    &:not(:disabled):not([readonly]) {
      cursor: pointer;
    }
  }

  // Customize the `:focus` state to imitate native WebKit styles.
  &:focus {
    color: $input-focus-color;
    background-color: $input-focus-bg;
    border-color: $primary-dark;
    outline: 0;
    box-shadow: none;
  }

  // Add some height to date inputs on iOS
  &::-webkit-date-and-time-value {
    // Multiply line-height by 1em if it has no unit
    height: if(unit($input-line-height) == "", $input-line-height * 1em, $input-line-height);
  }

  // Placeholder
  &::placeholder {
    color: $input-placeholder-color;
    opacity: 1;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[readonly] {
    background-color: $input-disabled-bg;
    border-color: $input-disabled-border-color;
    opacity: 1;
  }

  // File input buttons theming
  &::file-selector-button {
    padding: $input-padding-y $input-padding-x;
    margin: (-$input-padding-y) (-$input-padding-x);
    margin-inline-end: $input-padding-x;
    color: $form-file-button-color;
    @include gradient-bg($form-file-button-bg);
    pointer-events: none;
    border-color: inherit;
    border-style: solid;
    border-width: 0;
    border-inline-end-width: $input-border-width;
    border-radius: 0; // stylelint-disable-line property-disallowed-list
    @include transition($btn-transition);
  }

  &:hover:not(:disabled):not([readonly])::file-selector-button {
    background-color: $form-file-button-hover-bg;
  }

  &::-webkit-file-upload-button {
    padding: $input-padding-y $input-padding-x;
    margin: (-$input-padding-y) (-$input-padding-x);
    margin-inline-end: $input-padding-x;
    color: $form-file-button-color;
    @include gradient-bg($form-file-button-bg);
    pointer-events: none;
    border-color: inherit;
    border-style: solid;
    border-width: 0;
    border-inline-end-width: $input-border-width;
    border-radius: 0; // stylelint-disable-line property-disallowed-list
    @include transition($btn-transition);
  }

  &:hover:not(:disabled):not([readonly])::-webkit-file-upload-button {
    background-color: $form-file-button-hover-bg;
  }
}

// Readonly controls as plain text
//
// Apply class to a readonly input to make it appear like regular plain
// text (without any border, background color, focus indicator)

.form-control-plaintext {
  display: block;
  width: 100%;
  padding: $input-padding-y 0;
  margin-bottom: 0; // match inputs if this class comes on inputs with default margins
  line-height: $input-line-height;
  color: $input-plaintext-color;
  background-color: transparent;
  border: solid transparent;
  border-width: $input-border-width 0;

  &.form-control-small-tablet,
  &.form-control-large-tablet {
    padding-right: 0;
    padding-left: 0;
  }
}

// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// Repeated in `_input_group.scss` to avoid Sass extend issues.

.form-control-small-tablet {
  min-height: $input-height-small-tablet;
  padding: $input-padding-y-small-tablet $input-padding-x-small-tablet;
  @include font-size($input-font-size-small-tablet);
  @include border-radius($input-border-radius-small-tablet);

  &::file-selector-button {
    padding: $input-padding-y-small-tablet $input-padding-x-small-tablet;
    margin: (-$input-padding-y-small-tablet) (-$input-padding-x-small-tablet);
    margin-inline-end: $input-padding-x-small-tablet;
  }

  &::-webkit-file-upload-button {
    padding: $input-padding-y-small-tablet $input-padding-x-small-tablet;
    margin: (-$input-padding-y-small-tablet) (-$input-padding-x-small-tablet);
    margin-inline-end: $input-padding-x-small-tablet;
  }
}

.form-control-large-tablet {
  min-height: $input-height-large-tablet;
  padding: $input-padding-y-large-tablet $input-padding-x-large-tablet;
  @include font-size($input-font-size-large-tablet);
  //@include border-radius($input-border-radius-large-tablet);
   border-radius: 0.3875rem;

  &::file-selector-button {
    padding: $input-padding-y-large-tablet $input-padding-x-large-tablet;
    margin: (-$input-padding-y-large-tablet) (-$input-padding-x-large-tablet);
    margin-inline-end: $input-padding-x-large-tablet;
  }

  &::-webkit-file-upload-button {
    padding: $input-padding-y-large-tablet $input-padding-x-large-tablet;
    margin: (-$input-padding-y-large-tablet) (-$input-padding-x-large-tablet);
    margin-inline-end: $input-padding-x-large-tablet;
  }
}

// Make sure textareas don't shrink too much when resized
// stylelint-disable selector-no-qualifying-type
textarea {
  &.form-control {
    min-height: $input-height;
  }

  &.form-control-small-tablet {
    min-height: $input-height-small-tablet;
  }

  &.form-control-large-tablet {
    min-height: $input-height-large-tablet;
  }
}
// stylelint-enable selector-no-qualifying-type

.form-control-color {
  max-width: 3rem;
  height: auto; // Override fixed browser height
  padding: $input-padding-y;

  &:not(:disabled):not([readonly]) {
    cursor: pointer;
  }

  &::-moz-color-swatch {
    height: if(unit($input-line-height) == "", $input-line-height * 1em, $input-line-height);
    @include border-radius($input-border-radius);
  }

  &::-webkit-color-swatch {
    height: if(unit($input-line-height) == "", $input-line-height * 1em, $input-line-height);
    @include border-radius($input-border-radius);
  }
}
